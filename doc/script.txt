Core functions:
	void Info(const string& in msg) - show info msg.
	void DevInfo(const string& in msg) - like info but only in dev mode.
	void Warn(const string& in msg) - show warning msg.
	void Error(const string& in msg) - show error msg.
	string Format(const string& in format_str, ?& in ...) - return formatted string, takes 0 to 8 any arguments.
	int Random(int a, int b) - returns random number in range <a,b>.
	int Rand() - returns random int number.
	void Sleep(float seconds) - resume script execution after some time, don't use in places that require return value instantly like callbacks or dialog_if.
		! Console output don't work after sleep.

Core types:
	Int2 - 2d int point x, y.
	Vec2 - 2d vector x, y; static methods:
		float Distance(const Vec2& in v1, const Vec2& in v2);
	Vec3 - 3d vector x, y, z; static methods:
		float Distance(const Vec3& in v1, const Vec3& in v2);
	Vec4 - 4d vector x, y, z, w.

Funcdefs:
	float GetLocationCallback(Location@)

Enum ITEM_TYPE, values:
	IT_WEAPON
	IT_BOW
	IT_SHIELD
	IT_ARMOR
	IT_OTHER
	IT_CONSUMABLE
	IT_BOOK

Enum ITEM_FLAGS:
	ITEM_NOT_SHOP - not generated in shop.
	ITEM_NOT_MERCHANT - not generated for merchant.
	ITEM_NOT_BLACKSMITH - not generated for blacksmith.
	ITEM_NOT_ALCHEMIST - not generated for alchemist.

Dialog type.
Static methods:
	Dialog@ Get(const string& in id) - return dialog with id.

Item type:
	string name - readonly
	int value - readonly
Static methods:
	Item@ Get(const string& in id) - return item with id.
	Item@ GetRandom(int max_value) - returns random item with value <= max_value, can return quest item.

ItemList type:
	Item@ Get() - return random item from list.
	Item@ Get(int index) - return item from list by index.
	int Size() - return size of list.
Static methods:
	ItemList@ Get(const string& in id) - return item list with id.

GroundItem type:
	Vec3 pos - readonly
	Item@ base - readonly

UnitData type:
Static methods:
	UnitData@ Get(const string& in id) - return unit data with id.

UnitGroup type:
Static method:
	UnitGroup@ Get(const string& in id) - return unit group with id.
Static variables:
	UnitGroup@ empty - represents empty group.

Quest type:
	void AddEntry(const string& in str) - add journal message.
	void SetStarted(const string& in title) - mark quest as started, add journal entry with quest title, can only be called once.
	void SetCompleted() - mark quest as completed, can only be called when quest is started.
	void SetFailed() - mark quest as failed, can only be called when quest is started.
	void SetTimeout(int days) - register quest timeout, can only be called once (removed when quest is completed or failed).
	Dialog@ GetDialog(const string& in id) - return quest dialog with this id.
	void AddRumor(const string& in str) - add quest rumor to available dialogs.
	void RemoveRumor() - remove quest rumor from available dialogs.

Enum UNIT_ORDER, values:
	ORDER_NONE
	ORDER_WANDER - for heroes, they wander freely around city.
	ORDER_WAIT - for heroes, stay close to current position.
	ORDER_FOLLOW - for heroes, follow team leader.
	ORDER_LEAVE - unit goes to nearest location exit and leave.
	ORDER_MOVE - unit moves to position.
	ORDER_LOOK_AT - unit looks at position.
	ORDER_ESCAPE_TO - unit runs toward position and ignore enemies.
	ORDER_ESCAPE_TO_UNIT - unit runs toward other unit and ignore enemies.
	ORDER_GOTO_INN - unit goes to inn.
	ORDER_GUARD - unit stays close to another unit and remove dont_attack flag when target is attacked.
	ORDER_AUTO_TALK - ai will talk with nearest player or leader.

Enum MOVE_TYPE, values:
	MOVE_RUN - always run.
	MOVE_WALK - always walk.
	MOVE_RUN_WHEN_NEAR_TEAM - run when near team, otherwise look.

UnitOrderBuilder - used to set multiple unit orders one after another (for example unit.OrderWait().WithTimer(5).ThenFollow(player).WithTimer(5).ThenAutoTalk();)
	UnitOrderBuilder@ WithTimer(float timer) - set order timer.
	UnitOrderBuilder@ ThenWander()
	UnitOrderBuilder@ ThenWait()
	UnitOrderBuilder@ ThenFollow(Unit@)
	UnitOrderBuilder@ ThenLeave()
	UnitOrderBuilder@ ThenMove(const Vec3& in, MOVE_TYPE)
	UnitOrderBuilder@ ThenLookAt(const Vec3& in)
	UnitOrderBuilder@ ThenEscapeTo(const Vec3& in)
	UnitOrderBuilder@ ThenEscapeToUnit(Unit@)
	UnitOrderBuilder@ ThenGoToInn()
	UnitOrderBuilder@ ThenGuard(Unit@)
	UnitOrderBuilder@ ThenAutoTalk(bool=true, Dialog@=null, Quest@=null)

Unit type:
	const Vec3 pos
	Player@ player
	Hero@ hero
	int gold - modifying will show message.
	VarsContainer@ vars - readonly
	string name - can only be set for heroes (UnitData have hero flag) at startup.
	bool dont_attack - enemy ai don't attack.
	bool known_name - player known name, can't be changed from true to false.
	const UNIT_ORDER order - current unit order.
	LevelArea@ area - level area unit is in.
	bool IsTeamMember() - true if unit is team member.
	float GetHpp() - get health percentage 0..1.
	void AddItem(Item@ item, uint count = 1) - add item, will show message.
	void AddTeamItem(Item@ item, uint count = 1) - add team item, will show message.
	uint RemoveItem(const string& in item_id, uint count = 1) - remove item by id, will show message. For count 0 remove all, return removed count.
	uint RemoveItem(Item@ item, uint count = 1) - like above but use item handle.
	void RemoveQuestItem(Quest@) - remove 1 quest item from unit inventory.
	void ConsumeItem(Item@) - unit consume item (food or drink) if not busy.
	void AddDialog(Quest@, const string& in dialog_id) - add quest dialog to unit.
	void RemoveDialog(Quest@) - remove quest dialog from unit.
	void AddEventHandler(Quest@, EventType) - add event to unit.
	void RemoveEventHandler(Quest@) - remove event from unit.
	void OrderClear() - remove all unit orders.
	void OrderNext() - end current order and start next one.
	void OrderAttack() - orders unit to attack (crazies in this level will attack team, remove dont_attack).
	UnitOrderBuilder@ OrderWander() - order unit to wander.
	UnitOrderBuilder@ OrderWait() - order unit to wait.
	UnitOrderBuilder@ OrderFollow(Unit@) - order unit to follow target unit.
	UnitOrderBuilder@ OrderLeave() - order unit to leave current location.
	UnitOrderBuilder@ OrderMove(const Vec3& in pos, MOVE_TYPE) - order unit to move to position.
	UnitOrderBuilder@ OrderLookAt(const Vec3& in pos) - order unit to look at position.
	UnitOrderBuilder@ OrderEscapeTo(const Vec3& in pos) - order unit to escape to position (will ignore enemies).
	UnitOrderBuilder@ OrderEscapeToUnit(Unit@) - order unit to escape to unit (will ignore enemies).
	UnitOrderBuilder@ OrderGoToInn() - order unit to go to inn.
	UnitOrderBuilder@ OrderGuard(Unit@) - order unit to guard other unit and stay close, when attacked will defend target.
	UnitOrderBuilder@ OrderAutoTalk(bool leader = false, Dialog@=null, Quest@=null) - start dialog when close to player or leader, can use default dialog or selected.
	void Talk(const string& in text, int anim = -1) - unit talks text, animation (-1 random, 0 none, 1 what, 2 points).
	void RotateTo(const Vec3& in pos) - instantly rotates units too look at pos.
Globals:
	Unit@ target
Static methods:
	Unit@ Id(int id) - return unit with id.

Player type:
	Unit@ unit - unit player.
	const string name
	bool IsLeader() - return true if player is leader.
	bool HavePerk(const string& in perk) - return true if player have this perk.
Globals:
	Player@ pc

Hero type:
	bool lost_pvp - true if hero recently lost pvp.

Team namespace:
	Unit@ leader - readonly
	const uint size - active members count.
	const uint max_size - max active members count (currently 8).
	bool bandit - if true team will be attacked by citizens.
	bool HaveMember() - true if team have any more then 1 player or any npc.
	bool HavePcMember() - true if team have more then 1 player.
	bool HaveNpcMember() - true if team have any npc members.
	bool HaveItem(Item@) - true if anyone in team have this item.
	void AddGold(uint gold) - add gold divided between team members, shows message.
	void AddExp(int exp) - add experience to team, nagative value is unmodified, otherwise it depends on team size (1 player-200%, 2-150%, 3-125%, 4-100%, 5-75%, 6-60%, 7-50%, 8-40%).
	void AddReward(uint gold, uint exp = 0) - add gold and experience divided between team members.
	uint RemoveItem(Item@, uint count = 1) - remove items from team (count 0 = all).
	void AddMember(Unit@, int type = 0) - add team member, mode: 0-normal, 1-free (no gold), 2-visitor (no gold/exp).
	void Warp(const Vec3& in pos, const Vec3& in look_target) - warp team to position rotated towards look target.

EventType enum:
	EVENT_ENTER - for locations, send when player enter location (set field location).
	EVENT_PICKUP - for locations, send when someone pickups ground item (set field unit, item).
	EVENT_UPDATE - for unit, send every frame (set field unit).
	EVENT_TIMEOUT - for quests, send when quest timeout expired.
	EVENT_ENCOUNTER - for quest encounter, send when team start encounter on world map.
	EVENT_DIE - for units, send when unit dies.

LOCATION enum:
	L_CITY
	L_CAVE
	L_CAMP
	L_DUNGEON
	L_OUTSIDE
	L_ENCOUNTER

LOCATION_TARGET enum:
	FOREST
	MOONWELL
	ACADEMY
	VILLAGE
	CITY
	CAPITAL

LOCATION_IMAGE enum:
	LI_CITY
	LI_VILLAGE
	LI_CAVE
	LI_CAMP
	LI_DUNGEON
	LI_CRYPT
	LI_FOREST
	LI_MOONWELL
	LI_TOWER
	LI_LABYRINTH
	LI_MINE
	LI_SAWMILL
	LI_DUNGEON2
	LI_ACADEMY
	LI_CAPITAL

Spawn struct - unit & level.

SpawnGroup type:
	const uint count - rolled units count.
	void Fill(UnitGroup@ group, uint count, uint level) - roll units from random list.
	Spawn Get(uint index) - get rolled unit by index.
Static methods:
	SpawnGroup@ Get() - return new instance.

LevelArea type - part of level (dungeon, outside, building).

Location type:
	const Vec2 pos
	string name
	const LOCATION type
	LOCATION_IMAGE image
	int st
	bool reset - when true reset locations (respawn units/loot) when team enters
	Quest@ active_quest - quest assigned to location, prevent other quests from using this location.
	UnitGroup@ group - unit group that spawns in this location.
	bool IsCity() - true if location is city.
	bool IsVillage() - true if location is village.
	void SetKnown() - mark location as known.
	void AddEventHandler(Quest@, EventType) - add event to location.
	void RemoveEventHandler(Quest@) - remove event handler from location.

Encounter type:
	Vec2 pos
	bool dont_attack - spawned units have dont_attack set.
	Quest@ quest
	Dialog@ dialog
	int st
	UnitGroup@ group
	string text

World namespace:
	const Vec2 size - get worldmap size (in km).
	const Vec2 pos - position on worldmap.
	uint GetSettlements() - return count of settlements.
	Location@ GetLocation(uint index) - return location by index.
	string GetDirName(const Vec2& in pos1, const Vec2& in pos2) - get direction name string from pos1 to pos2.
	float GetTravelDays(float distance) - convert world distance to days of travel required.
	Location@ GetRandomCity() - returns random city (not village).
	Location@ GetRandomSettlementWithBuilding(const string& in building_id) - returns random settlement that have this building.
	Location@ GetRandomSettlement(Location@) - returns random settlement that is not passed to function.
	Location@ GetRandomSettlement(GetLocationCallback@) - returns random settlement using callback that returns weight.
	Location@ GetClosestLocation(LOCATION type, const Vec2& in pos, int target = -1) - get closest location of this type (doesn't return quest locations).
	Location@ CreateLocation(LOCATION type, const Vec2& in pos, int target = 0) - create new location at position.
	Encounter@ AddEncounter(Quest@) - add new encounter attached to this quest.
	void RemoveEncounter(Quest@) - remove encounters attached to this quest.
	void SetStartLocation(Location@) - game start location, must be set in quest Startup.

Level namespace:
	Location@ location - readonly
	bool IsSettlement() - true when inside city/village.
	bool IsCity() - true when inside city.
	bool IsVillage() - true when inside village.
	bool IsTutorial() - true when inside tutorial.
	bool IsSafe() - true when current location is safe.
	Unit@ FindUnit(UnitData@) - finds unit with this unit data.
	Unit@ GetNearestEnemy(Unit@) - finds nearest unit that is enemy of this unit.
	GroundItem@ FindItem(Item@) - finds first item.
	GroundItem@ FindNearestItem(Item@, const Vec3& in pos) - finds nearest item.
	void SpawnItemRandomly(Item@, uint count = 1) - spawns item inside level in random locations.
	Unit@ SpawnUnitNearLocation(UnitData@, const Vec3& in pos, float range = 2) - spawns unit near position.
	Unit@ SpawnUnit(LevelArea@, Spawn) - spawns unit inside area.
	Unit@ GetMayor() - returns city mayor or village soltys or null.

StockScript namespace - can only be called from stock script:
	void AddItem(Item@, uint count = 1) - add item to stock.
	void AddRandomItem(ITEM_TYPE type, int price_limit, int flags, int count = 1) - add random items to stock.

NoticeBoard namespace:
	void AddQuest(Quest@, const string& in dialog_id) - add dialog to notice board.
	void RemoveQuest(Quest@) - remove current quest dialog from notice board.

Event type:
	EventType event
	Location@ location
	Unit@ unit
	GroundItem@ item

ScriptContext type, global instance C:
	Quest@ quest
	Player@ pc

Cutscene namespace:
	void Start(bool instant = true) - start cutscene sequence.
	void Image(const string& in image) - queue image to show.
	void Text(const string& in text) - queue text to show.
	void End() - end cutscene sequence and suspend script until cutscene ended.
